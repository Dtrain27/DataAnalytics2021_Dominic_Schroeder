#print(getwd())
#setwd("D:\\Data Analytics\\In Class Work\\")
install.packages("rpart")
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
iris
dim(iris)
#create a sameple from the dataset
s_iris <- sample(150,100)
s_iris
#Create testing and training sets
iris_train <- iris[s_iris,]
iris_test  <- iris[-s_iris,]
dim(iris_train)
dim(iris_test)
#generate the decision tree model
dectionTreeModel <- rpart(Species~., iris_train,method = "class")
dectionTreeModel
#generate the decision tree model
dectionTreeModel <- rpart(Species~., iris_train,method = "class")
dectionTreeModel
library(gdata)
library("xlsx")
View(bronx1)
#alternate
bronx1<-read.xlsx(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
log_GSF <- log(GROSS.SQUARE.FEET)
log_LSF <- log(LAND.SQUARE.FEET)
logged_DF <- na.omit(logged_DF)
# Clean the data to remove NA rows
bronx1 <- na.omit(bronx1)
# Select the data and split utilizing a REGEX
SALE.PRICE<-sub("\\$","",SALE.PRICE)
# Compute the logs of the necessary data and clean the values
log_sales_price <- log(SALE.PRICE)
logged_DF <- data.frame(
"LOG_SP" = log_sales_price,
"LOG_GSF" = log_GSF,
"LOG_LSF" = log_LSF
)
library(gdata)
library("xlsx")
#alternate
bronx1<-read.xlsx(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
# Clean the data to remove NA rows
bronx1 <- na.omit(bronx1)
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
# Select the data and split utilizing a REGEX
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
# Compute the logs of the necessary data and clean the values
log_sales_price <- log(SALE.PRICE)
log_GSF <- log(GROSS.SQUARE.FEET)
log_LSF <- log(LAND.SQUARE.FEET)
logged_DF <- data.frame(
"LOG_SP" = log_sales_price,
"LOG_GSF" = log_GSF,
"LOG_LSF" = log_LSF
)
logged_DF <- na.omit(logged_DF)
fctr_NEIGHBOR <- factor(bronx1$NEIGHBORHOOD)
fctr_NEIGHBOR <- fctr_NEIGHBOR[!is.infinite(rowSums(logged_DF))]
fctr_BLDNG_CLSS <- factor(bronx1$BUILDING.CLASS.CATEGORY)
fctr_BLDNG_CLSS <- fctr_BLDNG_CLSS[!is.infinite(rowSums(logged_DF))]
logged_DF <- logged_DF[!is.infinite(rowSums(logged_DF)),]
attach(logged_DF)
m1<-lm(logged_DF$LOG_SP~logged_DF$LOG_GSF)
summary(m1)
abline(m1,col="red",lwd=2)
plot(resid(m1))
# Model 2
m2<-lm(logged_DF$LOG_SP~logged_DF$LOG_GSF+logged_DF$LOG_LSF+fctr_NEIGHBOR)
summary(m2)
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(logged_DF$LOG_SP~0+logged_DF$LOG_GSF+logged_DF$LOG_LSF+fctr_NEIGHBOR)
summary(m2a)
plot(resid(m2a))
# Model 3
m3<-lm(logged_DF$LOG_SP~0+logged_DF$LOG_GSF+logged_DF$LOG_LSF+fctr_NEIGHBOR+fctr_BLDNG_CLSS)
summary(m3)
plot(resid(m3))
# Model 4
m4<-lm(logged_DF$LOG_SP~0+logged_DF$LOG_GSF+logged_DF$LOG_LSF+fctr_NEIGHBOR*fctr_BLDNG_CLSS)
summary(m4)
plot(resid(m4))
bronx1$SALE.PRICE<-sub("\\$","",bronx1$SALE.PRICE)
bronx1$SALE.PRICE<-as.numeric(gsub(",","", bronx1$SALE.PRICE))
bronx1$GROSS.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$GROSS.SQUARE.FEET))
bronx1$LAND.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$LAND.SQUARE.FEET))
bronx1$SALE.DATE<- as.Date(gsub("[^]:digit:]]","",bronx1$SALE.DATE))
bronx1$YEAR.BUILT<- as.numeric(gsub("[^]:digit:]]","",bronx1$YEAR.BUILT))
bronx1$ZIP.CODE<- as.character(gsub("[^]:digit:]]","",bronx1$ZIP.CODE))
minprice<-10000
bronx1<-bronx1[which(bronx1$SALE.PRICE>=minprice),]
nval<-dim(bronx1)[1]
bronx1$ADDRESSONLY<- gsub("[,][[:print:]]*","",gsub("[ ]+","",trim(bronx1$ADDRESS))) bronxadd<-unique(data.frame(bronx1$ADDRESSONLY, bronx1$ZIP.CODE,stringsAsFactors=FALSE)) names(bronxadd)<-c("ADDRESSONLY","ZIP.CODE") bronxadd<-bronxadd[order(bronxadd$ADDRESSONLY),] duplicates<-duplicated(bronx1$ADDRESSONLY)
for(i in 1:2345) {
if(duplicates[i]==FALSE) dupadd<-bronxadd[bronxadd$duplicates,1]
}#what are we doing with dupadd?
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
require(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_ctree)
help(ctree)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
require(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_ctree)
allexamples <- FALSE
y <- data.frame(A=c(rep("red", 100), rep("blue", 100)),
B=c(rnorm(100),round(rnorm(100,5,1),1)), C=runif(200),
D=c(rep("big", 150), rep("small", 50)),
E=rnorm(200))
gpairs(y)
library(gpairs)
Install("gpairs")
install("gpairs")
require("gpairs")
install.packages("gpairs")
library(gpairs)
allexamples <- FALSE
y <- data.frame(A=c(rep("red", 100), rep("blue", 100)),
B=c(rnorm(100),round(rnorm(100,5,1),1)), C=runif(200),
D=c(rep("big", 150), rep("small", 50)),
E=rnorm(200))
gpairs(y)
data(iris)
gpairs(iris)
if (allexamples) {
gpairs(iris, upper.pars = list(scatter = 'stats'),
scatter.pars = list(pch = substr(as.character(iris$Species), 1, 1),
col = as.numeric(iris$Species)),
stat.pars = list(verbose = FALSE))
gpairs(iris, lower.pars = list(scatter = 'corrgram'),
upper.pars = list(conditional = 'boxplot', scatter = 'loess'),
scatter.pars = list(pch = 20))
}
data(Leaves)
gpairs(Leaves[1:10], lower.pars = list(scatter = 'loess'))
if (allexamples) {
gpairs(Leaves[1:10], upper.pars = list(scatter = 'stats'),
lower.pars = list(scatter = 'corrgram'),
stat.pars = list(verbose = FALSE), gap = 0)
corrgram(Leaves[,-33])
}
runexample <- FALSE
if (runexample) {
data(NewHavenResidential)
gpairs(NewHavenResidential)
}
data("Titanic")
help(rpart)
help("rpart")
attach(titanic_data)
titanic_data <- data("Titanic")
attach(titanic_data)
titanic_data <- data("Titanic")
attach(titanic_data)
titanic_data <- data("Titanic")
attach(titanic_data)
force(Titanic)
force(Titanic)
data.frame(data("Titanic"))
data(Titanic)
force(Titanic)
# Practice on the Titanic Data
library(titanic)
# Practice on the Titanic Data
install.packages("titanic")
library(titanic)
data(Titanic)
data(titanic)
data(titanic_train)
force(Titanic)
force(titanic_train)
attach(titanic_train)
View(titanic_train)
fit <- rpart(titanic_train$Survived ~ .)
library(rpart)
fit <- rpart(titanic_train$Survived ~ .)
fit <- rpart(titanic_train$Survived ~ ., data=titanic_train)
plot(fit)
tree <- rpart(titanic_train$Survived ~ ., data=titanic_train)
plot(fit)
help(ctree)
tree <- ctree((titanic_train$Survived ~ ., data=titanic_train)
tree <- ctree(titanic_train$Survived ~ ., data=titanic_train)
tree <- ctree(as.factor(titanic_train$Survived) ~ ., data=titanic_train)
library(gdata)
library("xlsx")
brooklyn<-read.xlsx(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(brooklyn)
brooklyn<-read.xlsx(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
# Clean the data to remove NA rows
brooklyn <- na.omit(brooklyn)
