print(getwd())
print(getwd())
setwd("D:\\Data Analytics\\DataAnalytics2021_Dominic_Schroeder\\Labs\\Lab 1")
EPI_data <- read.csv("data\\2010EPI_data.csv")
print(getwd())
setwd("D:\\Data Analytics\\DataAnalytics2021_Dominic_Schroeder\\Labs\\Lab 1")
EPI_data <- read.csv("data\\2010EPI_data.csv")
EPI_data <- EPI_data[-1,]
# Ensure the first row is the names of the columns
colnames(EPI_data) <- EPI_data[1,]
View(EPI_data)
attach(EPI_data) 	# sets the object
fix(EPI_data) 	# launches a simple data editor
View(EPI_data)
EPI_data <- read.csv("data\\2010EPI_data.csv")
EPI_data <- EPI_data[-1,]
# Ensure the first row is the names of the columns
colnames(EPI_data) <- EPI_data[1,]
View(EPI_data)
attach(EPI_data) 	# sets the object
fix(EPI_data) 	# launches a simple data editor
EPI_data <- read.csv("data\\2010EPI_data.csv")
View(EPI_data)
# Ensure the first row is the names of the columns
colnames(EPI_data) <- EPI_data[1,]
View(EPI_data)
View(EPI_data)
attach(EPI_data) 	# sets the object
EPI <- EPI_data$EPI 			# prints out values EPI_data$EPI
# Plot the CDF function
plot(ecdf(EPI), do.points=FALSE, verticals=TRUE)
help("qqnorm")
par(pty="s")
help("par")
qqnorm(EPI);
qqline(EPI);
EPI <- as.numeric(EPI_data$EPI) 			# prints out values EPI_data$EPI
qqnorm(EPI);
qqline(EPI);
x <- seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab="Q-Q plot fot t dsn")
qqline(x)
# Plotting EPI against Air and Water H
Air_data <- as.numeric(EPI_data$AIR_H)
Water_data <- as.numeric(EPI_data$WATER_H)
qqplot(EPI, Air_data)
qqplot(EPI, Water_data)
boxplot(EPI, Air_data)
boxplot(EPI, Water_data)
EPI_data <- read.csv("data\\2010EPI_data.csv")
# Ensure the first row is the names of the columns
colnames(EPI_data) <- EPI_data[1,]
EPI_data <- EPI_data[-1,]
View(EPI_data)
View(EPI_data)
multivar_data <- read.csv("data\\multivariate.csv")
View(multivar_data)
View(multivar_data)
mm <- lm(Homeowners~Immigrant)
attach(multivar_data)
mm <- lm(Homeowners~Immigrant)
mm
head(multivar_data)
help(lm)
summary(mm)
plot(Homeowners~Immigrant)
help(abline)
abline(mm)
abline(mm, col=2, lwd=3)
newImmigrantdata <- data.frame(Immigrant = c(0, 20))
mm %>% predict(newImmigrantdata)
# Multivariate Exercise
library(dplyr)
mm %>% predict(newImmigrantdata)
abline(mm)
abline(mm,col=3,lwd=3) # line color = green, line width = 3
attributes(mm)
mm$coefficients
pplot(EPI, Air_data, Water_data)
plot(EPI, Air_data, Water_data)
EPI_data <- read.csv("data\\2010EPI_data.csv")
View(EPI_data)
attach(EPI_data) 	# sets the object
fix(EPI_data) 	# launches a simple data editor
# Ensure the first row is the names of the columns
colnames(EPI_data) <- EPI_data[1,]
EPI <- as.numeric(EPI_data$EPI) 			# prints out values EPI_data$EPI
View(EPI_data)
EPI_data <- EPI_data[-1,]
View(EPI_data)
View(EPI_data)
EPI <- as.numeric(EPI_data$EPI) 			# prints out values EPI_data$EPI
if (FALSE) {
"
tf <- is.na(EPI) # records True values if the value is NA
E <- EPI[!tf] # filters out NA values, new array
"
}
# Plotting EPI against Air and Water H
Air_data <- as.numeric(EPI_data$AIR_H)
Water_data <- as.numeric(EPI_data$WATER_H)
boxplot(EPI, Air_data)
boxplot(EPI, Water_data)
plot(EPI, Air_data, Water_data)
plot(EPI, Air_data)
qqplot(EPI, Water_data)
qqplot(EPI, Water_data, Air_data)
# EPI data 2016 analysis
EPI_data_2016 <- read.csv("data\\2016EPI_data.csv")
# Ensure the first row is the names of the columns
colnames(EPI_data_2016) <- EPI_data_2016[1,]
EPI_data_2016 <- EPI_data_2016[-1,]
View(EPI_data_2016)
fix(EPI_data_2016) 	# launches a simple data editor
# EPI data 2016 analysis
EPI_data_2016 <- read.csv("data\\2016EPI_data.csv")
View(EPI_data_2016)
# Lab 1 Visualization exercise
plot(mtcar$wt, mtcars$mpg)
# Lab 1 Visualization exercise
plot(mtcars$wt, mtcars$mpg)
qplot(mtcars$wt, mtcars$mpg)
library(ggplot2)
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data=mtcars)
ggplot(mtcars, aes(x = wt,  y= mpg)) + geom_point()
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col = "red")
points(pressure$temperature, pressure$pressure/2, col = "blue")
library(ggplot2)
qplot(pressure$temperature, pressure$pressure, geom="line")
qplot(temper)
qplot(temperature, pressure, data = pressure, geom = "line")
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Creating Bar graphs
barplot(BOD$demand, names.arg = BOD$Time)
barplot(table(mtcatrs$cyl))
table(mtcars$cyl)
barplot(table(mtcatrs$cyl))
barplot(table(mtcars$cyl))
qplot(mtcars$cyl)
qplot(factor(mtcars$cyl))
#Bar graph of counts
qqplot(factor(cyl), data=mtcars)
#Bar graph of counts
qplot(factor(cyl), data=mtcars)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
#Creating Histograms using ggplot
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 10)
hist(mtcars$mpg, breaks = 5)
hist(mtcars$mpg, breaks = 12)
qplot(mpg, data=mtcars, binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)
# Creating Box-plot
plot(ToothGrowth$supp, ToothGrowth$len)
#formula syntax
boxplot(len ~ supp, data = ToothGrowth)
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
qplot(supp, len, data = ToothGrowth, geom = "boxplot")
ggplot(Too , aes(x=supp, y=len)) + geom_boxplot()
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
qplot(interaction(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
qplot(interaction(supp, dose), lenm data = ToothGrowth, geom = "boxplot")
qplot(interaction(supp, dose), len, data = ToothGrowth, geom = "boxplot")
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot()
# Chapter 3 R Graphics
library(gcookbook)
# Chapter 3 R Graphics
library(gcookbook)
# Chapter 3 R Graphics
library(gcookbook)
ggplot(pg_mean, aes(x=group, y=weight)) + geom_bar(stat = "identity")
BOD
ggplot(BOD, aes(x=Time, y=demand)) + geom_bar(stat="identity")
# Convert Time to a discrete (categorical) variable with factor() function.
ggplot(BOD, aes(x=factor(Time), y=demand)) + geom_bar(stat = "identity")
ggplot(BOD, aes(x=factor(Time), y=demand)) + geom_bar(stat = "identity", fill="orange", colour="red")
# Lab 1 Visualization exercise
install.packages(gcookbook)
# Lab 1  exercise
install.packages("gcookbook")
# Chapter 3 R Graphics
library(gcookbook)
cabbage_exp
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(sts="identity")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(stat="identity")
ggplot(diamonds, aes(x=cut)) + geom_bar()
data("diamonds")
diamonds
ggplot(diamonds,aes(x=carat)) + geom_bar()
geom_bar()
ggplot(diamonds, aes(x=carat)) + geom_histogram()
# Taking Top 10 States
library(gcookbook) # for the dataset
# Taking Top 10 States
ups <- subset(uspopchange, rank(Change)>40)
ups
ggplot(ups, aes(x=Abb, y= Change, fill=Region)) + geom_bar(stat = "identity")
ggplot(ups, aes(x=Abb, y=Change, fill=Region)) +geom_bin2d()
ggplot(ups, aes(x=Abb, y=Change, fill=Region)) + geom_col()
# Different coloring scheme to make the bars more appealing
ggplot(ups, aes(x=reorder(Abb,Change), y=Change, fill=Region)) + geom_bar(stat = "identity", colour= "red") +
scale_fill_manual(values=c("#669933", "#FFCC66")) + xlab("US-States")
ggplot(ups, aes(x=reorder(Abb,Change), y=Change, fill=Region)) + geom_bar(stat = "identity", color = "purple") +
scale_fill_manual(values=c("#224455","#DDCC33"))
csub <- subset(climate, source="Berkeley" & Year >= 1900)
csub$pos <- csub$Anomaly10y >=0
csub
ggplot(csub, aes(x=Year, y=Anomaly10y, fill= pos)) + geom_bar(stat = "identity", position = "identity")
ggplot(csub, aes(x=Year, y=Anomaly10y, fill=pos)) + geom_bar(stat="identity", colour="black", size=0.25) +
scale_fill_manual(values=c("#CCEEFF", "#FFDDDD"), guide=FALSE)
ggplot(pg_mean, aes(x=group, y=weight)) +geom_bar(stat="identity")
# Narrow Bars
ggplot(pg_mean, aes(x=group, y=weight)) +geom_bar(stat="identity", width = 0.5)
# Wider bars, maximum width = 1
ggplot(pg_mean, aes(x=group, y=weight)) +geom_bar(stat = "identity", width = 0.95)
# Different bar widths
ggplot(cabbage_exp, aes(x=Date, y= Weight, fill=Cultivar)) + geom_bar(stat = "identity", width = 0.5, position = "dodge")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(stat = "identity", width = 0.5, position = position_dodge(0.7))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) + geom_bar(stat = "identity")
cabbage_exp
ggplot(cabbage_exp, aes(x= Date, y= Weight, fill=Cultivar)) + geom_bar(stat = "identity") + guides(fill=guide_legend(reverse = TRUE))
# Adding Lables to your Graphs
ggplot(cabbage_exp, aes(x=interaction(Date,Cultivar), y=Weight)) +geom_bar(stat = "identity") + geom_text(aes(label=Weight),vjust=1.5,colour="white")
# Adjust y limits to be a little higher
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
geom_bar(stat="identity") +
geom_text(aes(label=Weight), vjust=-0.2) +
ylim(0, max(cabbage_exp$Weight) * 1.05)
# Map y positions slightly above bar top - y range of plot will auto-adjust
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
geom_bar(stat="identity") +
geom_text(aes(y=Weight+0.1, label=Weight))
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat="identity", position="dodge") +
geom_text(aes(label=Weight), vjust=1.5, colour="white",
position=position_dodge(.9), size=3)
# make a Cleveland dot plot
#The simplest way to create a dot plot is to use geom_point() function
tophit <- tophitters2001[1:25,] # take top 25 top hitters
tophit
ggplot(tophit, aes(x=avg, y=name)) + geom_point()
tophit[,c("name","lg","avg")]
ggplot(tophit, aes(x=avg, y= reorder(name,avg))) + geom_point(size=3, colour="red") +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(colour ="grey60",linetype="dashed"))
ggplot(tophit, aes(x=avg, y=reorder(name,avg))) + geom_point(size=2.5, colour="blue") +
theme_classic() +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey60", linetype = twodash)
)
ggplot(tophit, aes(x=avg, y=reorder(name,avg))) + geom_point(size=2.5, colour="blue") +
theme_classic() +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey60", linetype = "twodash")
)
# Get the names sorted by lg, then by avg
nameorder <- tophit$name[order(tophit$lg, tophit$avg)]
tophit$name <- factor(tophit$name, levels = nameorder)
ggplot(tophit, aes(x=avg, y=name)) +
geom_segment(aes(yend=name), xend=0, colour="grey70")+
geom_point(size=3, aes(colour=lg)) +
scale_color_brewer(palette="Set1", limits=c("NL","AL")) +
theme_bw() +
theme(
panel.grid.major.y = element_blank(),
legend.position = c(1,0.55),
legend.justification = c(1,0.5)
)
ggplot(tophit, aes(x=avg, y=name)) +
geom_segment(aes(yend=name), xend=0, colour="grey40") +
geom_point(size=3, aes(colour=lg)) +
scale_color_brewer(palette="Set1", limits=c("NL","AL"), guide=FALSE) +
theme_bw() +
theme(panel.grid.major.y = element_blank()) +
facet_grid(lg ~ ., scales = "free_y", space="free_y")
